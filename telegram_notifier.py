# ./telegram_notifier.py
import requests
import logging
from datetime import datetime, timezone
import time  # <-- –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
import re    # <-- –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ Retry-After –±—É–¥–µ—Ç –≤ body)
import json
from config import *

logger = logging.getLogger(__name__)

class TelegramNotifier:
    def __init__(self):
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        self.max_retries = 3 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.base_delay = 1  # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

    def split_message(self, message, max_length=4096):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è Telegram (–ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)"""
        if len(message) <= max_length:
            return [message]
        
        parts = []
        current_part = ""
        lines = message.split('\n')
        
        for line in lines:
            # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
            if len(current_part) + len(line) + 1 <= max_length:
                if current_part:
                    current_part += '\n' + line
                else:
                    current_part = line
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å –Ω–µ –ø—É—Å—Ç–∞—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë
                if current_part:
                    parts.append(current_part)
                    current_part = line
                else:
                    # –ï—Å–ª–∏ –¥–∞–∂–µ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –æ–±—Ä–µ–∑–∞–µ–º –µ—ë
                    parts.append(line[:max_length])
                    current_part = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if current_part:
            parts.append(current_part)
            
        return parts

    def send_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π 429"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º Dry-run
        if DRY_RUN:
            logger.info(f"[DRY-RUN] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {message[:100]}...")
            return
            
        if not self.bot_token or not self.chat_id:
            logger.warning("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ ID —á–∞—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ message - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        if not isinstance(message, str):
             logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞: {type(message)}. –û–∂–∏–¥–∞–ª–∞—Å—å —Å—Ç—Ä–æ–∫–∞.")
             return
        # –£–±–∏—Ä–∞–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã UTF-16 —Å—É—Ä—Ä–æ–≥–∞—Ç–æ–≤
        # Telegram API –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏—Ö –Ω–∞–ø—Ä—è–º—É—é
        try:
             # –ö–æ–¥–∏—Ä—É–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º, –∑–∞–º–µ–Ω—è—è –æ—à–∏–±–∫–∏
             message = message.encode('utf-16', 'surrogatepass').decode('utf-16', 'replace')
        except (UnicodeError, UnicodeEncodeError):
             # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å "–ø–ª–æ—Ö–∏–µ" —Å–∏–º–≤–æ–ª—ã
             # –≠—Ç–æ –≥—Ä—É–±–∞—è –∑–∞–º–µ–Ω–∞, –Ω–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å
             message = message.encode('utf-8', 'replace').decode('utf-8', 'replace')
             logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏ –∑–∞–º–µ–Ω–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã UTF –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        message_parts = self.split_message(message)
        
        for part_index, message_part in enumerate(message_parts):
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–±–∏—Ç–æ
            if len(message_parts) > 1:
                message_part = f"üìÑ –ß–∞—Å—Ç—å {part_index + 1}/{len(message_parts)}\n\n{message_part}"
            
            data = {
                'chat_id': self.chat_id,
                'text': message_part,
                'parse_mode': 'HTML' # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
            self._send_single_message(data, part_index + 1, len(message_parts))
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å rate limiting
            if part_index < len(message_parts) - 1:
                time.sleep(0.5)

    def _send_single_message(self, data, part_number=None, total_parts=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        
        for attempt in range(self.max_retries):
             try:
                 response = requests.post(url, data=data, timeout=30) # –î–æ–±–∞–≤–∏–º —Ç–∞–π–º–∞—É—Ç
                 response.raise_for_status() # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ 4xx –∏ 5xx
                 if part_number and total_parts:
                     logger.info(f"–ß–∞—Å—Ç—å {part_number}/{total_parts} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram.")
                 else:
                     logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
                 return # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
             except requests.exceptions.HTTPError as e:
                 if response.status_code == 429:
                     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 429 Too Many Requests
                     logger.warning(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å 429 (Too Many Requests) –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}")
                     # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Retry-After
                     retry_after = None
                     if 'Retry-After' in response.headers:
                         try:
                             retry_after = int(response.headers['Retry-After'])
                             logger.debug(f"Retry-After –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {retry_after} —Å–µ–∫—É–Ω–¥")
                         except (ValueError, TypeError):
                             logger.warning(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å Retry-After –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {response.headers.get('Retry-After')}")
                     # –ï—Å–ª–∏ Retry-After –Ω–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ —Ç–µ–ª–µ –æ—Ç–≤–µ—Ç–∞ (–º–µ–Ω–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ)
                     # –ü—Ä–∏–º–µ—Ä —Ç–µ–ª–∞: {"ok":false,"error_code":429,"description":"Too Many Requests: retry after X","parameters":{"retry_after":X}}
                     if retry_after is None:
                         try:
                             error_data = response.json()
                             if 'parameters' in error_data and 'retry_after' in error_data['parameters']:
                                 retry_after = error_data['parameters']['retry_after']
                                 logger.debug(f"Retry-After –∏–∑ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞: {retry_after} —Å–µ–∫—É–Ω–¥")
                         except (json.JSONDecodeError, KeyError, TypeError):
                             logger.warning("Retry-After –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö, –Ω–∏ –≤ —Ç–µ–ª–µ –æ—Ç–≤–µ—Ç–∞.")
                     # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å retry_after, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                     if retry_after is None:
                         retry_after = self.base_delay * (2 ** attempt) # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                         logger.warning(f"Retry-After –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {retry_after} —Å–µ–∫—É–Ω–¥.")
                     # –î–æ–±–∞–≤–∏–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
                     wait_time = retry_after + 1
                     logger.warning(f"–û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                     time.sleep(wait_time)
                 else:
                     # –î—Ä—É–≥–∞—è HTTP –æ—à–∏–±–∫–∞ (–Ω–µ 429)
                     logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}): {e}")
                     if attempt < self.max_retries - 1:
                         # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                         time.sleep(self.base_delay * (2 ** attempt))
                     # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—Å—è –¥–∞–ª—å—à–µ
             except requests.exceptions.RequestException as e:
                 # –î—Ä—É–≥–∞—è —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (—Ç–∞–π–º–∞—É—Ç, DNS, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Ç.–¥.)
                 logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}): {e}")
                 if attempt < self.max_retries - 1:
                     time.sleep(self.base_delay * (2 ** attempt))
                 # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—Å—è –¥–∞–ª—å—à–µ
             except Exception as e:
                 # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
                 logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}", exc_info=True)
                 # –í —Å–ª—É—á–∞–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
                 break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫.")

    def get_current_time_msk(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
        return datetime.now(MOSCOW_TZ)
    
    def format_crl_number(self, crl_number):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ CRL –≤ hex"""
        if crl_number is None:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ hex
            if isinstance(crl_number, (int, float)):
                return f"{int(crl_number):x}"
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, –∑–∞—Ç–µ–º –≤ hex
                return f"{int(crl_number):x}"
        except (ValueError, TypeError):
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return str(crl_number)

    def get_check_time_string(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        return f"üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.format_datetime(self.get_current_time_msk().isoformat())}"

    def check_notification_enabled(self, notification_type, description):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if not notification_type:
            logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {description} –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            return False
        return True

    def format_datetime(self, dt):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏"""
        if dt:
            try:
                # –ï—Å–ª–∏ dt - —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
                if isinstance(dt, str):
                    dt = datetime.fromisoformat(dt)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                if dt.tzinfo is None:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ, —Å—á–∏—Ç–∞–µ–º UTC –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–æ—Å–∫–≤—É
                    dt = dt.replace(tzinfo=timezone.utc).astimezone(MOSCOW_TZ)
                else:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                    dt = dt.astimezone(MOSCOW_TZ)
                return dt.strftime('%d.%m.%Y %H:%M:%S')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")
                return str(dt)
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    def send_expiring_crl_alert(self, crl_name, time_left_hours, next_update, crl_url, size_mb=None, ca_name=None, ca_reg_number=None, crl_fingerprint=None, crl_key_identifier=None, crl_number=None):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ–∫–∞—é—â–µ–º CRL"""
        if not self.check_notification_enabled(NOTIFY_EXPIRING_CRL, "–æ–± –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö CRL"):
            return
        now_msk = self.get_current_time_msk()
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä CRL
        crl_number_formatted = self.format_crl_number(crl_number)
        
        message = (
            f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï: CRL —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç</b>\n"
            f"üìÅ –ò–º—è —Ñ–∞–π–ª–∞: <code>{crl_name}</code>\n"
            f"üè¢ –£–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π —Ü–µ–Ω—Ç—Ä: <b>{ca_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ê–£–¶'}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{ca_reg_number or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä'}</code>\n"
            f"üîó URL: <code>{crl_url}</code>\n"
            f"üî¢ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä CRL: <code>{crl_number_formatted}</code>\n"
            f"üîë –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª—é—á–∞ –∏–∑–¥–∞—Ç–µ–ª—è: <code>{crl_key_identifier or '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}</code>\n"
            f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: <b>{time_left_hours:.1f} —á–∞—Å–∞</b>\n"
            f"üìÖ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {self.format_datetime(next_update)}\n"
            f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {self.format_datetime(now_msk)}"
        )
        self.send_message(message)

    def send_expired_crl_alert(self, crl_name, expired_time, crl_url, size_mb=None, ca_name=None, ca_reg_number=None, crl_fingerprint=None, crl_key_identifier=None, crl_number=None):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ–∫—à–µ–º CRL"""
        if not self.check_notification_enabled(NOTIFY_EXPIRED_CRL, "–æ–± –∏—Å—Ç–µ–∫—à–∏—Ö CRL"):
            return
        now_msk = self.get_current_time_msk()
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä CRL
        crl_number_formatted = self.format_crl_number(crl_number)
        
        message = (
            f"üö® <b>–ö–†–ò–¢–ò–ß–ù–û: CRL –∏—Å—Ç–µ–∫</b>\n"
            f"üìÅ –ò–º—è —Ñ–∞–π–ª–∞: <code>{crl_name}</code>\n"
            f"üè¢ –£–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π —Ü–µ–Ω—Ç—Ä: <b>{ca_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ê–£–¶'}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{ca_reg_number or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä'}</code>\n"
            f"üîó URL: <code>{crl_url}</code>\n"
            f"üî¢ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä CRL: <code>{crl_number_formatted}</code>\n"
            f"üîë –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª—é—á–∞ –∏–∑–¥–∞—Ç–µ–ª—è: <code>{crl_key_identifier or '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}</code>\n"
            f"‚è∞ –ò—Å—Ç–µ–∫: {self.format_datetime(expired_time)}\n"
            f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {self.format_datetime(now_msk)}"
        )
        self.send_message(message)

    def send_new_crl_info(self, crl_name, revoked_count, revoked_increase, categories_total, categories_delta, publication_time, crl_number, crl_url, total_revoked, next_update, size_mb=None, ca_name=None, ca_reg_number=None, crl_fingerprint=None, crl_key_identifier=None):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º CRL –∏ –ø—Ä–∏—Ä–æ—Å—Ç–µ –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
        if not self.check_notification_enabled(NOTIFY_NEW_CRL, "–æ –Ω–æ–≤—ã—Ö CRL"):
            return
        categories_text = ""
        try:
            categories_total = categories_total or {}
            categories_delta = categories_delta or {}
            all_keys = sorted(set(categories_total.keys()) | set(categories_delta.keys()))
            if all_keys:
                lines = []
                for key in all_keys:
                    total_val = int(categories_total.get(key, 0))
                    delta_val = int(categories_delta.get(key, 0))
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏—Ä–æ—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∏ –º–µ–Ω—å—à–µ –æ–±—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è,
                    # —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –Ω–æ–º–µ—Ä (—Å–ª—É—á–∞–π –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞/–ø–æ–ª–Ω–æ–π –∑–∞–º–µ–Ω—ã)
                    if delta_val > 0 and delta_val < total_val:
                        lines.append(f"  ‚Ä¢ {key}: {total_val} (+{delta_val})")
                    else:
                        lines.append(f"  ‚Ä¢ {key}: {total_val}")
                categories_text = "\n".join(lines)
                logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {crl_name}: total={categories_total}, delta={categories_delta}")
            else:
                logger.warning(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—É—Å—Ç—ã–µ –¥–ª—è {crl_name}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è {crl_name}: {e}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä CRL, —É–±–∏—Ä–∞—è –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
        crl_number_formatted = self.format_crl_number(crl_number)
        
        message = (
            f"üÜï <b>–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è CRL –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞</b>\n"
            f"üìÅ –ò–º—è —Ñ–∞–π–ª–∞: <code>{crl_name}</code>\n"
            f"üè¢ –£–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π —Ü–µ–Ω—Ç—Ä: <b>{ca_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ê–£–¶'}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{ca_reg_number or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä'}</code>\n"
            f"üîó URL: <code>{crl_url}</code>\n"
            f"üî¢ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä CRL: <code>{crl_number_formatted}</code>\n"
            f"üîë –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª—é—á–∞ –∏–∑–¥–∞—Ç–µ–ª—è: <code>{crl_key_identifier or '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}</code>\n"
            f"üìÑ –í—Å–µ–≥–æ –æ—Ç–æ–∑–≤–∞–Ω–æ: <b>{total_revoked}</b>\n"
            f"üìà –ü—Ä–∏—Ä–æ—Å—Ç: <b>+{revoked_increase}</b>\n"
            f"üìÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {self.format_datetime(publication_time)}\n"
            f"üìÖ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {self.format_datetime(next_update)}\n"
        )
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä CRL
        if SHOW_CRL_SIZE_MB and size_mb is not None:
            try:
                message += f"üì¶ –†–∞–∑–º–µ—Ä CRL: <b>{float(size_mb):.2f} –ú–ë</b>\n"
            except Exception:
                pass
        if categories_text:
            message += f"üìä –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n{categories_text}"
        self.send_message(message)

    def send_missed_crl_alert(self, crl_name, expected_update_time, crl_url, ca_name=None, ca_reg_number=None):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–º CRL"""
        if not self.check_notification_enabled(NOTIFY_MISSED_CRL, "–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö CRL"):
            return
        now_msk = self.get_current_time_msk()
        message = (
            f"‚ùå <b>–û–®–ò–ë–ö–ê: CRL –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤–æ–≤—Ä–µ–º—è</b>\n"
            f"üìÅ –ò–º—è —Ñ–∞–π–ª–∞: <code>{crl_name}</code>\n"
            f"üè¢ –£–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π —Ü–µ–Ω—Ç—Ä: <b>{ca_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ê–£–¶'}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{ca_reg_number or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä'}</code>\n"
            f"üîó URL: <code>{crl_url}</code>\n"
            f"üìÖ –û–∂–∏–¥–∞–ª–æ—Å—å: {self.format_datetime(expected_update_time)}\n"
            f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {self.format_datetime(now_msk)}"
        )
        self.send_message(message)

    def send_weekly_stats(self, stats):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
        if not self.check_notification_enabled(NOTIFY_WEEKLY_STATS, "–æ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"):
            return
        categories_text = "\n".join([f"  ‚Ä¢ {cat}: {count}" for cat, count in stats.items()])
        now_msk = self.get_current_time_msk()
        message = (
            f"üìä <b>–ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤</b>\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è\n"
            f"üìà –ü—Ä–∏—Ä–æ—Å—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n{categories_text}\n"
            f"üïê –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {self.format_datetime(now_msk)}"
        )
        self.send_message(message)

    # --- –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π TSL ---
    def send_tsl_new_ca(self, ca_info):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –¥–µ–π—Å—Ç–≤—É—é—â–µ–º –ê–£–¶"""
        if not self.check_notification_enabled(NOTIFY_NEW_CAS, "–æ –Ω–æ–≤—ã—Ö –ê–£–¶"):
            return
        now_msk = self.get_current_time_msk()
        message = (
            f"üÜï <b>–ù–æ–≤—ã–π –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –ê–£–¶</b>\n"
            f"üì¶ –í–µ—Ä—Å–∏—è TSL: <b>{ca_info.get('tsl_version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
            f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{ca_info['name']}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{ca_info['reg_number']}</code>\n"
            f"üìÖ –î–∞—Ç–∞ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏: {self.format_datetime(ca_info['effective_date'])}\n"
            f"{self.get_check_time_string()}"
        )
        self.send_message(message)

    def send_tsl_date_change(self, ca_info, old_date, new_date):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏ –ê–£–¶"""
        if not self.check_notification_enabled(NOTIFY_DATE_CHANGES, "–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –¥–∞—Ç"):
            return
        now_msk = self.get_current_time_msk()
        message = (
            f"üìÜ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏ –ê–£–¶</b>\n"
            f"üì¶ –í–µ—Ä—Å–∏—è TSL: <b>{ca_info.get('tsl_version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
            f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{ca_info['name']}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{ca_info['reg_number']}</code>\n"
            f"üìÖ –°—Ç–∞—Ä–∞—è –¥–∞—Ç–∞: {self.format_datetime(old_date)}\n"
            f"üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞: {self.format_datetime(new_date)}\n"
            f"{self.get_check_time_string()}"
        )
        self.send_message(message)

    def send_tsl_crl_change(self, ca_info, new_crls):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö CRL —É –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ê–£–¶"""
        if not self.check_notification_enabled(NOTIFY_CRL_CHANGES, "–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö CRL"):
            return
        now_msk = self.get_current_time_msk()
        crl_list_items = [f"  ‚Ä¢ <code>{url}</code>" for url in new_crls[:10]]
        if len(new_crls) > 10:
            crl_list_items.append(f"  ‚Ä¢ ... –∏ –µ—â–µ {len(new_crls) - 10}")
        crl_list = "\n".join(crl_list_items)
        message = (
            f"üîó <b>–ù–æ–≤—ã–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ CRL —É –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ê–£–¶</b>\n"
            f"üì¶ –í–µ—Ä—Å–∏—è TSL: <b>{ca_info.get('tsl_version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
            f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{ca_info['name']}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{ca_info['reg_number']}</code>\n"
            f"üìÑ –ù–æ–≤—ã–µ CRL:\n{crl_list}\n"
            f"{self.get_check_time_string()}"
        )
        self.send_message(message)

    def send_tsl_status_change(self, ca_info, reason):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ê–£–¶"""
        if not self.check_notification_enabled(NOTIFY_STATUS_CHANGES, "–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞ –ê–£–¶"):
            return
        now_msk = self.get_current_time_msk()
        message = (
            f"‚ùå <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ê–£–¶</b>\n"
            f"üì¶ –í–µ—Ä—Å–∏—è TSL: <b>{ca_info.get('tsl_version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
            f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{ca_info['name']}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{ca_info['reg_number']}</code>\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"{self.get_check_time_string()}"
        )
        self.send_message(message)

    def send_tsl_removed_ca(self, ca_info):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–Ω–æ–º –ê–£–¶"""
        if not self.check_notification_enabled(NOTIFY_STATUS_CHANGES, "–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞ –ê–£–¶"):
            return
        now_msk = self.get_current_time_msk()
        message = (
            f"üóëÔ∏è <b>–ê–£–¶ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞</b>\n"
            f"üì¶ –í–µ—Ä—Å–∏—è TSL: <b>{ca_info.get('tsl_version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
            f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{ca_info['name']}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{ca_info['reg_number']}</code>\n"
            f"üèõÔ∏è –û–ì–†–ù: <code>{ca_info.get('ogrn', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {ca_info['reason']}\n"
            f"{self.get_check_time_string()}"
        )
        self.send_message(message)

    def send_tsl_name_change(self, change_info):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ê–£–¶"""
        if not self.check_notification_enabled(NOTIFY_STATUS_CHANGES, "–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞ –ê–£–¶"):
            return
        now_msk = self.get_current_time_msk()
        message = (
            f"üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ê–£–¶</b>\n"
            f"üì¶ –í–µ—Ä—Å–∏—è TSL: <b>{change_info.get('tsl_version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{change_info['reg_number']}</code>\n"
            f"üìÑ –ë—ã–ª–æ: <b>{change_info['old_name']}</b>\n"
            f"üìÑ –°—Ç–∞–ª–æ: <b>{change_info['new_name']}</b>\n"
            f"{self.get_check_time_string()}"
        )
        self.send_message(message)

    def send_tsl_ogrn_change(self, change_info):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –û–ì–†–ù –ê–£–¶"""
        if not self.check_notification_enabled(NOTIFY_STATUS_CHANGES, "–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞ –ê–£–¶"):
            return
        now_msk = self.get_current_time_msk()
        message = (
            f"üèõÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –û–ì–†–ù –ê–£–¶</b>\n"
            f"üì¶ –í–µ—Ä—Å–∏—è TSL: <b>{change_info.get('tsl_version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
            f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{change_info['name']}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{change_info['reg_number']}</code>\n"
            f"üìÑ –ë—ã–ª–æ: <code>{change_info['old_ogrn']}</code>\n"
            f"üìÑ –°—Ç–∞–ª–æ: <code>{change_info['new_ogrn']}</code>\n"
            f"{self.get_check_time_string()}"
        )
        self.send_message(message)

    def send_tsl_crl_added(self, change_info):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö CRL"""
        if not self.check_notification_enabled(NOTIFY_CRL_CHANGES, "–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö CRL"):
            return
        now_msk = self.get_current_time_msk()
        crl_list = "\n".join([f"‚Ä¢ <code>{crl}</code>" for crl in change_info['crls']])
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ TSL/–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        crl_number = change_info.get('crl_number')
        crl_number_formatted = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        crl_number_formatted = self.format_crl_number(crl_number)

        issuer_key_id = change_info.get('issuer_key_id') or change_info.get('crl_key_identifier') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

        ca_tool = change_info.get('ca_tool', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        ca_tool_class = change_info.get('ca_tool_class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        cert_subject = change_info.get('cert_subject', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        cert_issuer = change_info.get('cert_issuer', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        cert_serial = change_info.get('cert_serial', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        cert_validity = change_info.get('cert_validity', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        cert_fingerprint = change_info.get('cert_fingerprint', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

        message = (
            f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ CRL</b>\n"
            f"üì¶ –í–µ—Ä—Å–∏—è TSL: <b>{change_info.get('tsl_version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
            f"üè¢ –ê–£–¶: <b>{change_info['name']}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{change_info['reg_number']}</code>\n"
            f"üî¢ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä CRL: <code>{crl_number_formatted}</code>\n"
            f"üîë –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª—é—á–∞ –∏–∑–¥–∞—Ç–µ–ª—è: <code>{issuer_key_id}</code>\n"
            f"üõ†Ô∏è –°—Ä–µ–¥—Å—Ç–≤–æ –£–¶: <b>{ca_tool}</b>\n"
            f"üè∑Ô∏è –ö–ª–∞—Å—Å —Å—Ä–µ–¥—Å—Ç–≤–∞ –£–¶: <b>{ca_tool_class}</b>\n"
            f"üë§ –ö–æ–º—É –≤—ã–¥–∞–Ω: <code>{cert_subject}</code>\n"
            f"üèõÔ∏è –ö–µ–º –≤—ã–¥–∞–Ω: <code>{cert_issuer}</code>\n"
            f"#Ô∏è‚É£ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: <code>{cert_serial}</code>\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç: <code>{cert_validity}</code>\n"
            f"üîè –û—Ç–ø–µ—á–∞—Ç–æ–∫: <code>{cert_fingerprint}</code>\n"
            f"üìã –ù–æ–≤—ã–µ CRL:\n{crl_list}\n"
            f"{self.get_check_time_string()}"
        )
        self.send_message(message)

    def send_tsl_crl_removed(self, change_info):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ CRL"""
        if not self.check_notification_enabled(NOTIFY_CRL_CHANGES, "–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö CRL"):
            return
        now_msk = self.get_current_time_msk()
        crl_list = "\n".join([f"‚Ä¢ <code>{crl}</code>" for crl in change_info['crls']])
        message = (
            f"‚ûñ <b>–£–¥–∞–ª–µ–Ω—ã CRL</b>\n"
            f"üì¶ –í–µ—Ä—Å–∏—è TSL: <b>{change_info.get('tsl_version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
            f"üè¢ –ê–£–¶: <b>{change_info['name']}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{change_info['reg_number']}</code>\n"
            f"üìã –£–¥–∞–ª–µ–Ω–Ω—ã–µ CRL:\n{crl_list}\n"
            f"{self.get_check_time_string()}"
        )
        self.send_message(message)

    def send_tsl_crl_url_change(self, change_info):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–æ–≤ CRL"""
        if not self.check_notification_enabled(NOTIFY_CRL_CHANGES, "–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö CRL"):
            return
        now_msk = self.get_current_time_msk()
        old_urls = "\n".join([f"‚Ä¢ <code>{url}</code>" for url in change_info['old_urls']])
        new_urls = "\n".join([f"‚Ä¢ <code>{url}</code>" for url in change_info['new_urls']])
        message = (
            f"üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω—ã –∞–¥—Ä–µ—Å–∞ CRL</b>\n"
            f"üì¶ –í–µ—Ä—Å–∏—è TSL: <b>{change_info.get('tsl_version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
            f"üè¢ –ê–£–¶: <b>{change_info['name']}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{change_info['reg_number']}</code>\n"
            f"üìÑ –ë—ã–ª–æ:\n{old_urls}\n"
            f"üìÑ –°—Ç–∞–ª–æ:\n{new_urls}\n"
            f"{self.get_check_time_string()}"
        )
        self.send_message(message)

    def send_tsl_other_change(self, change_info):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥—Ä—É–≥–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ TSL"""
        if not self.check_notification_enabled(NOTIFY_STATUS_CHANGES, "–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞ –ê–£–¶"):
            return
        now_msk = self.get_current_time_msk()
        message = (
            f"üìã <b>–î—Ä—É–≥–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ TSL</b>\n"
            f"üì¶ –í–µ—Ä—Å–∏—è TSL: <b>{change_info.get('tsl_version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
            f"üè¢ –ê–£–¶: <b>{change_info['name']}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{change_info['reg_number']}</code>\n"
            f"üìù –ü–æ–ª–µ: <b>{change_info['field']}</b>\n"
            f"üìÑ –ë—ã–ª–æ: <code>{change_info['old_value']}</code>\n"
            f"üìÑ –°—Ç–∞–ª–æ: <code>{change_info['new_value']}</code>\n"
            f"{self.get_check_time_string()}"
        )
        self.send_message(message)

    def send_tsl_short_name_change(self, change_info):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ê–£–¶"""
        if not self.check_notification_enabled(NOTIFY_STATUS_CHANGES, "–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞ –ê–£–¶"):
            return
        now_msk = self.get_current_time_msk()
        message = (
            f"üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ê–£–¶</b>\n"
            f"üì¶ –í–µ—Ä—Å–∏—è TSL: <b>{change_info.get('tsl_version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
            f"üè¢ –ê–£–¶: <b>{change_info['name']}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{change_info['reg_number']}</code>\n"
            f"üìÑ –ë—ã–ª–æ: <b>{change_info['old_short_name']}</b>\n"
            f"üìÑ –°—Ç–∞–ª–æ: <b>{change_info['new_short_name']}</b>\n"
            f"{self.get_check_time_string()}"
        )
        self.send_message(message)

    def send_tsl_inn_change(self, change_info):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ò–ù–ù –ê–£–¶"""
        if not self.check_notification_enabled(NOTIFY_STATUS_CHANGES, "–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞ –ê–£–¶"):
            return
        now_msk = self.get_current_time_msk()
        message = (
            f"üèõÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ò–ù–ù –ê–£–¶</b>\n"
            f"üì¶ –í–µ—Ä—Å–∏—è TSL: <b>{change_info.get('tsl_version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
            f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{change_info['name']}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{change_info['reg_number']}</code>\n"
            f"üìÑ –ë—ã–ª–æ: <code>{change_info['old_inn']}</code>\n"
            f"üìÑ –°—Ç–∞–ª–æ: <code>{change_info['new_inn']}</code>\n"
            f"{self.get_check_time_string()}"
        )
        self.send_message(message)

    def send_tsl_email_change(self, change_info):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ email –ê–£–¶"""
        if not self.check_notification_enabled(NOTIFY_STATUS_CHANGES, "–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞ –ê–£–¶"):
            return
        now_msk = self.get_current_time_msk()
        message = (
            f"üìß <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ email –ê–£–¶</b>\n"
            f"üì¶ –í–µ—Ä—Å–∏—è TSL: <b>{change_info.get('tsl_version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"   
            f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{change_info['name']}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{change_info['reg_number']}</code>\n"
            f"üìÑ –ë—ã–ª–æ: <code>{change_info['old_email']}</code>\n"
            f"üìÑ –°—Ç–∞–ª–æ: <code>{change_info['new_email']}</code>\n"
            f"{self.get_check_time_string()}"
        )
        self.send_message(message)

    def send_tsl_website_change(self, change_info):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–µ–±-—Å–∞–π—Ç–∞ –ê–£–¶"""
        if not self.check_notification_enabled(NOTIFY_STATUS_CHANGES, "–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞ –ê–£–¶"):
            return
        now_msk = self.get_current_time_msk()
        message = (
            f"üåê <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ–±-—Å–∞–π—Ç–∞ –ê–£–¶</b>\n"
            f"üì¶ –í–µ—Ä—Å–∏—è TSL: <b>{change_info.get('tsl_version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
            f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{change_info['name']}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{change_info['reg_number']}</code>\n"
            f"üìÑ –ë—ã–ª–æ: <code>{change_info['old_website']}</code>\n"
            f"üìÑ –°—Ç–∞–ª–æ: <code>{change_info['new_website']}</code>\n"
            f"{self.get_check_time_string()}"
        )
        self.send_message(message)

    def send_tsl_registry_url_change(self, change_info):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ URL —Ä–µ–µ—Å—Ç—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ê–£–¶"""
        if not self.check_notification_enabled(NOTIFY_STATUS_CHANGES, "–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞ –ê–£–¶"):
            return
        now_msk = self.get_current_time_msk()
        message = (
            f"üìã <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ URL —Ä–µ–µ—Å—Ç—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ê–£–¶</b>\n"
            f"üì¶ –í–µ—Ä—Å–∏—è TSL: <b>{change_info.get('tsl_version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
            f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{change_info['name']}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{change_info['reg_number']}</code>\n"
            f"üìÑ –ë—ã–ª–æ: <code>{change_info['old_registry_url']}</code>\n"
            f"üìÑ –°—Ç–∞–ª–æ: <code>{change_info['new_registry_url']}</code>\n"
            f"{self.get_check_time_string()}"
        )
        self.send_message(message)

    def send_tsl_address_change(self, change_info):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –ê–£–¶"""
        if not self.check_notification_enabled(NOTIFY_STATUS_CHANGES, "–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞ –ê–£–¶"):
            return
        now_msk = self.get_current_time_msk()
        message = (
            f"üìç <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ê–£–¶</b>\n"
            f"üì¶ –í–µ—Ä—Å–∏—è TSL: <b>{change_info.get('tsl_version', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
            f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{change_info['name']}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{change_info['reg_number']}</code>\n"
            f"üìÑ –ë—ã–ª–æ: <code>{change_info['old_address']}</code>\n"
            f"üìÑ –°—Ç–∞–ª–æ: <code>{change_info['new_address']}</code>\n"
            f"{self.get_check_time_string()}"
        )
        self.send_message(message)

    def send_crl_download_failed(self, crl_name, tried_urls, last_error, ca_name=None, ca_reg_number=None, crl_number=None, issuer_key_id=None):
        """–û—Ç–¥–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å/–Ω–∞–π—Ç–∏ CRL (–ø–æ –∏—Ç–æ–≥–∞–º –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫)"""
        if not self.check_notification_enabled(NOTIFY_CRL_DOWNLOAD_FAIL, "–æ–± –æ—à–∏–±–∫–∞—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CRL"):
            return
        now_msk = self.get_current_time_msk()
        url_list = "\n".join([f"‚Ä¢ <code>{u}</code>" for u in tried_urls])
        crl_number_formatted = None
        crl_number_formatted = self.format_crl_number(crl_number)
        
        logger.warning(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≤–∞–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CRL: crl_name={crl_name}, urls={tried_urls}, ca={ca_name}, reg={ca_reg_number}")
        message = (
            f"‚ùó <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å CRL ‚Äî CRL –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n"
            f"üè¢ –ê–£–¶: <b>{ca_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ê–£–¶'}</b>\n"
            f"üî¢ –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{ca_reg_number or '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}</code>\n"
            f"üìÅ –ò–º—è —Ñ–∞–π–ª–∞: <code>{crl_name}</code>\n"
            f"üîó URL:\n{url_list}\n"
            f"üî¢ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä CRL: <code>{crl_number_formatted or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</code>\n"
            f"üîë –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª—é—á–∞ –∏–∑–¥–∞—Ç–µ–ª—è: <code>{issuer_key_id or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</code>\n"
            f"{self.get_check_time_string()}"
        )
        self.send_message(message)
