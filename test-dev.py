#!/usr/bin/env python3
"""
CRLChecker Development Test Script
–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ devcontainer
"""

import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, '/app')

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π...")
    
    try:
        import config
        print("‚úÖ config.py - OK")
    except Exception as e:
        print(f"‚ùå config.py - –û—à–∏–±–∫–∞: {e}")
        return False
    
    try:
        from db import init_db
        print("‚úÖ db.py - OK")
    except Exception as e:
        print(f"‚ùå db.py - –û—à–∏–±–∫–∞: {e}")
        return False
    
    try:
        from crl_parser import CRLParser
        print("‚úÖ crl_parser.py - OK")
    except Exception as e:
        print(f"‚ùå crl_parser.py - –û—à–∏–±–∫–∞: {e}")
        return False
    
    try:
        from telegram_notifier import TelegramNotifier
        print("‚úÖ telegram_notifier.py - OK")
    except Exception as e:
        print(f"‚ùå telegram_notifier.py - –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from db import init_db, get_connection
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü—ã –≤ –ë–î: {[table[0] for table in tables]}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False

def test_crl_parser():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ CRL"""
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ CRL...")
    
    try:
        from crl_parser import CRLParser
        
        parser = CRLParser()
        print("‚úÖ CRLParser —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç —Å –ø—Ä–æ—Å—Ç—ã–º URL (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)
        test_url = "http://pki.tax.gov.ru/cdp/d156fb382c4c55ad7eb3ae0ac66749577f87e116.crl"
        print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL: {test_url}")
        
        # –ù–µ–±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
        info = parser.get_crl_info(test_url)
        if info:
            print("‚úÖ CRL —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
            print(f"   ‚Ä¢ –û—Ç–æ–∑–≤–∞–Ω–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {info.get('revoked_count', 0)}")
            print(f"   ‚Ä¢ –ù–æ–º–µ—Ä CRL: {info.get('crl_number', 'N/A')}")
        else:
            print("‚ö†Ô∏è CRL –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False

def test_telegram():
    """–¢–µ—Å—Ç Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram...")
    
    try:
        from telegram_notifier import TelegramNotifier
        from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, DRY_RUN
        
        if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == "YOUR_BOT_TOKEN":
            print("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
        
        if not TELEGRAM_CHAT_ID or TELEGRAM_CHAT_ID == "YOUR_CHAT_ID":
            print("‚ö†Ô∏è TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
        
        notifier = TelegramNotifier()
        print("‚úÖ TelegramNotifier —Å–æ–∑–¥–∞–Ω")
        
        if DRY_RUN:
            print("üîß –†–µ–∂–∏–º DRY_RUN –≤–∫–ª—é—á–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
        else:
            print("‚ö†Ô∏è DRY_RUN –æ—Ç–∫–ª—é—á–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
        return False

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        import config
        
        print(f"   ‚Ä¢ FNS_ONLY: {config.FNS_ONLY}")
        print(f"   ‚Ä¢ VERIFY_TLS: {config.VERIFY_TLS}")
        print(f"   ‚Ä¢ DRY_RUN: {config.DRY_RUN}")
        print(f"   ‚Ä¢ DB_ENABLED: {config.DB_ENABLED}")
        print(f"   ‚Ä¢ METRICS_PORT: {config.METRICS_PORT}")
        print(f"   ‚Ä¢ SHOW_CRL_SIZE_MB: {config.SHOW_CRL_SIZE_MB}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ CRLChecker Development Test")
    print("=" * 50)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üêç Python: {sys.version}")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print()
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π", test_imports),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database),
        ("–ü–∞—Ä—Å–µ—Ä CRL", test_crl_parser),
        ("Telegram", test_telegram),
    ]
    
    results = []
    
    for name, test_func in tests:
        try:
            result = test_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {name}: {e}")
            results.append((name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{name:20} {status}")
        if result:
            passed += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    
    print("\nüí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("   python debug_crl.py <URL>     - –æ—Ç–ª–∞–¥–∫–∞ CRL")
    print("   python run_all_monitors.py    - –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("   sqlite3 data/crlchecker.db    - —Ä–∞–±–æ—Ç–∞ —Å –ë–î")

if __name__ == "__main__":
    main()
