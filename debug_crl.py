#!/usr/bin/env python3
"""
CRLChecker Debug Script
–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ª–∞–¥–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ CRL —Ñ–∞–π–ª–∞
"""

import sys
import os
import argparse
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, '/app')

from crl_parser import CRLParser
from config import VERIFY_TLS, SHOW_CRL_SIZE_MB

def debug_crl(url, save_file=False):
    """–û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CRL"""
    print(f"üîç –û—Ç–ª–∞–¥–∫–∞ CRL: {url}")
    print("=" * 60)
    
    parser = CRLParser()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CRL
        info = parser.get_crl_info(url)
        
        if info:
            print("‚úÖ CRL —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω!")
            print()
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print("üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
            print(f"  ‚Ä¢ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {info.get('this_update', 'N/A')}")
            print(f"  ‚Ä¢ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {info.get('next_update', 'N/A')}")
            print(f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö: {info.get('revoked_count', 0)}")
            print(f"  ‚Ä¢ –ù–æ–º–µ—Ä CRL: {info.get('crl_number', 'N/A')}")
            print(f"  ‚Ä¢ –ò–∑–¥–∞—Ç–µ–ª—å: {info.get('issuer', 'N/A')}")
            print(f"  ‚Ä¢ –û—Ç–ø–µ—á–∞—Ç–æ–∫ CRL: {info.get('crl_fingerprint', 'N/A')}")
            print(f"  ‚Ä¢ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª—é—á–∞: {info.get('crl_key_identifier', 'N/A')}")
            print(f"  ‚Ä¢ Delta CRL: {'–î–∞' if info.get('is_delta', False) else '–ù–µ—Ç'}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–µ
            if SHOW_CRL_SIZE_MB and 'size_mb' in info:
                print(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä: {info['size_mb']:.2f} –ú–ë")
            
            # –û—Ç–æ–∑–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
            revoked_certs = info.get('revoked_certificates', [])
            if revoked_certs:
                print()
                print(f"üìú –û—Ç–æ–∑–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã ({len(revoked_certs)}):")
                for i, cert in enumerate(revoked_certs[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    print(f"  {i+1}. –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {cert.get('serial_number', 'N/A')}")
                    print(f"     –î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞: {cert.get('revocation_date', 'N/A')}")
                    print(f"     –ü—Ä–∏—á–∏–Ω–∞: {cert.get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                    print()
                
                if len(revoked_certs) > 10:
                    print(f"  ... –∏ –µ—â–µ {len(revoked_certs) - 10} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            if save_file:
                filename = f"debug_crl_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                import json
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(info, f, indent=2, ensure_ascii=False, default=str)
                print(f"üíæ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filename}")
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CRL")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ CRL: {e}")
        import traceback
        traceback.print_exc()

def main():
    parser = argparse.ArgumentParser(description='–û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CRL')
    parser.add_argument('url', help='URL CRL —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏')
    parser.add_argument('--save', action='store_true', help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON —Ñ–∞–π–ª')
    
    args = parser.parse_args()
    
    print("üîß CRLChecker Debug Tool")
    print(f"üåê URL: {args.url}")
    print(f"üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ TLS: {'–í–∫–ª—é—á–µ–Ω–∞' if VERIFY_TLS else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
    print(f"üìè –ü–æ–∫–∞–∑ —Ä–∞–∑–º–µ—Ä–∞: {'–í–∫–ª—é—á–µ–Ω' if SHOW_CRL_SIZE_MB else '–û—Ç–∫–ª—é—á–µ–Ω'}")
    print()
    
    debug_crl(args.url, args.save)

if __name__ == "__main__":
    main()